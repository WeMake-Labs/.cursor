---
alwaysApply: true
---

# Velocity Hub - Development Workflow Orchestration

> **Your single entry point for maximum development velocity**

This rule reduces cognitive overhead by providing instant context for all development workflows in the WeMake MCP monorepo.

## Quick Navigation

- 🔧 [Automation Suggestions](mdc:.cursor/rules/04-automation-suggestions.mdc) - AI-suggested fixes and improvements
- ☁️ [Workers Deployment](mdc:.cursor/rules/30-workers-deployment.mdc) - Complete deployment guide
- 🧰 [Bun-First Standards](mdc:.cursor/rules/03-bun-development.mdc) - Bun development standards
- 📚 [MCP Protocol](mdc:.cursor/rules/20-mcp-protocol.mdc) - MCP server standards
- 🏗️ [MCP Servers](mdc:.cursor/rules/21-mcp-servers.mdc) - Implementation patterns
- 📖 [Documentation](mdc:.cursor/rules/12-documentation.mdc) - Documentation standards
- 🏢 [Enterprise Standards](mdc:.cursor/rules/02-enterprise-standards.mdc) - Quality & security
- 🧪 [Testing](mdc:.cursor/rules/11-testing.mdc) - Testing standards
- 📘 [TypeScript](mdc:.cursor/rules/10-typescript.mdc) - TypeScript standards

## Quick Start Matrix

| Task                        | Command                                        | When to Use                             |
| --------------------------- | ---------------------------------------------- | --------------------------------------- |
| **Install dependencies**    | `bun install`                                  | First time setup, after pulling changes |
| **Start a server locally**  | `cd src/<server-name> && bun run start`        | Local development and testing           |
| **Run all tests**           | `bun test`                                     | Before committing, CI validation        |
| **Test with coverage**      | `bun test --coverage`                          | Pre-commit validation (80%+ required)   |
| **Build all servers**       | `bun run build-all`                            | Pre-deployment, CI builds               |
| **Build single server**     | `cd src/<server-name> && bun run build`        | Server-specific builds                  |
| **Format code**             | `bun run format`                               | Fix formatting and linting              |
| **Type check**              | `bun run check`                                | Validate TypeScript without emit        |
| **Local Workers dev**       | `cd src/<server-name> && bunx wrangler dev`    | Test Workers compatibility locally      |
| **Deploy to Workers**       | `cd src/<server-name> && bunx wrangler deploy` | Production deployment                   |
| **View Workers logs**       | `bunx wrangler tail`                           | Debug production issues                 |
| **Test with MCP Inspector** | `bunx @modelcontextprotocol/inspector@latest`  | Test MCP server functionality           |

## Context-Aware Workflow Guidance

### Starting a New Task

**If you're creating a NEW MCP server:**

1. Check [MCP Servers](mdc:.cursor/rules/21-mcp-servers.mdc) for architecture patterns
2. Use [MCP Protocol](mdc:.cursor/rules/20-mcp-protocol.mdc) for tool handler setup
3. Follow [Documentation](mdc:.cursor/rules/12-documentation.mdc) for README template
4. Request [Automation Suggestions](mdc:.cursor/rules/04-automation-suggestions.mdc) for boilerplate generation

**If you're modifying EXISTING code:**

1. Run tests first: `bun test` to establish baseline
2. Make changes with [Enterprise Standards](mdc:.cursor/rules/02-enterprise-standards.mdc) in mind
3. Use [TypeScript](mdc:.cursor/rules/10-typescript.mdc) patterns for type safety
4. Request [Automation Suggestions](mdc:.cursor/rules/04-automation-suggestions.mdc) for fixes

**If you're preparing for DEPLOYMENT:**

1. Consult [Workers Deployment](mdc:.cursor/rules/30-workers-deployment.mdc) checklist
2. Verify [Testing](mdc:.cursor/rules/11-testing.mdc) coverage (80%+ required)
3. Review [Enterprise Standards](mdc:.cursor/rules/02-enterprise-standards.mdc) security
4. Build with `bun run build` and validate output

### Current Phase Detection

The AI will automatically detect your current phase based on:

- **Local Development**: Working in `src/*/src/` files → Focus on [Bun-First Standards](mdc:.cursor/rules/03-bun-development.mdc)
- **Testing**: Working in `*.test.ts` files → Focus on [Testing](mdc:.cursor/rules/11-testing.mdc)
- **Documentation**: Working in `*.md` files → Focus on [Documentation](mdc:.cursor/rules/12-documentation.mdc)
- **Deployment**: Working with `wrangler.toml` or `worker.ts` → Focus on [Workers Deployment](mdc:.cursor/rules/30-workers-deployment.mdc)

## Cognitive Load Reducers

### File Purpose Map

```
mcp/                                    # Monorepo root
├── .cursor/rules/                      # Cursor AI rules (you are here)
├── src/                                # MCP servers (workspaces)
│   ├── <server-name>/                  # Individual MCP server
│   │   ├── src/
│   │   │   ├── index.ts                # Main server (Bun-first, stdio)
│   │   │   ├── worker.ts               # Workers entry (optional, SSE)
│   │   │   └── *.test.ts               # Bun native tests
│   │   ├── dist/                       # Build output
│   │   ├── package.json                # Server dependencies & scripts
│   │   ├── tsconfig.json               # TypeScript config
│   │   ├── wrangler.toml               # Workers deployment config
│   │   └── README.md                   # Server documentation
├── package.json                        # Root workspace config
├── tsconfig.json                       # Base TypeScript config
├── bunfig.toml                         # Bun configuration
├── nx.json                             # Nx monorepo config
└── eslint.config.mjs                   # ESLint configuration
```

### Monorepo Navigation Shortcuts

**Quick file access patterns:**

- Server source: `src/<server-name>/src/index.ts`
- Server tests: `src/<server-name>/src/index.test.ts`
- Server docs: `src/<server-name>/README.md`
- Server config: `src/<server-name>/package.json`
- Workspace root: `package.json`, `nx.json`, `bunfig.toml`

**Common server names:**

- `decision-framework`, `memory`, `sequential-thinking`
- `analogical-reasoning`, `collaborative-reasoning`, `structured-argumentation`
- `metacognitive-monitoring`, `scientific-method`, `ethical-reasoning`
- `focus-group`, `bias-detection`, `goal-tracker`, `constraint-solver`
- `visual-reasoning`, `multimodal-synthesizer`, `narrative-planner`
- `transaction-manager`

### Common Patterns Quick-Reference

#### MCP Server Structure Pattern

```typescript
class MyMCPServer {
  // 1. State tracking
  private history: Record<string, DataType[]> = {};
  private registry: Record<string, Entity> = {};

  // 2. Validation (always validate inputs)
  private validateInput(input: unknown): ValidatedType {
    if (typeof input !== "object" || input === null) {
      throw new Error("Invalid input: expected object");
    }
    // Type guards and validation
    return input as ValidatedType;
  }

  // 3. Public process method (returns Result)
  public processOperation(input: unknown): Result {
    try {
      const validated = this.validateInput(input);
      // Process and return success
      return { content: [{ type: "text", text: result }] };
    } catch (error) {
      // Handle errors gracefully
      return {
        content: [{ type: "text", text: `❌ Error: ${error.message}` }],
        isError: true,
      };
    }
  }
}
```

#### Tool Handler Pattern

```typescript
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  switch (name) {
    case "my_tool":
      return serverInstance.processOperation(args);
    default:
      throw new Error(`Unknown tool: ${name}`);
  }
});
```

#### Test Pattern

```typescript
import { describe, it, expect, beforeEach } from "bun:test";

describe("MyServer", () => {
  let server: MyServer;

  beforeEach(() => {
    server = new MyServer();
  });

  it("should handle valid input", () => {
    const result = server.processOperation({ field: "value" });
    expect(result.isError).toBeUndefined();
    expect(result.content[0].text).toContain("expected");
  });

  it("should handle invalid input", () => {
    const result = server.processOperation(null);
    expect(result.isError).toBe(true);
  });
});
```

## Self-Healing Suggestions

When the AI detects issues, it will suggest fixes following [Automation Suggestions](mdc:.cursor/rules/04-automation-suggestions.mdc):

### Suggested Fix Categories

1. **Import Organization** (Safe auto-suggest)

   - Missing imports
   - Unused imports
   - Import order optimization

2. **Type Improvements** (Review recommended)

   - Type inference opportunities
   - Missing type annotations
   - `any` type replacements

3. **Error Handling** (Review required)

   - Missing try-catch blocks
   - Unhandled promise rejections
   - Edge case validation

4. **Test Coverage** (Guidance provided)

   - Missing test cases
   - Uncovered branches
   - Edge case tests

5. **Documentation** (Templates provided)
   - Missing JSDoc comments
   - README updates needed
   - Type documentation

### How AI Suggests Fixes

The AI will provide:

- **Issue description**: What was detected
- **Suggested fix**: Exact code or command to run
- **Rationale**: Why this fix improves velocity/quality
- **Copy-paste command**: Ready to execute

Example:

```
🔧 Detected: Missing import for CallToolRequestSchema

📝 Suggested Fix:
import { CallToolRequestSchema } from "@modelcontextprotocol/sdk/types.js";

💡 Rationale: Required for tool request handling

⚡ Quick Fix: Add to imports section at line 3
```

## Workflow Optimization Tips

### Velocity Boosters

1. **Use Nx caching**: Nx caches builds and tests across the monorepo
2. **Run affected only**: `bunx nx affected:test` runs only changed projects
3. **Watch mode**: `bun test --watch` for continuous feedback
4. **Parallel execution**: Nx runs tasks in parallel when possible
5. **Inspector workflow**: Keep MCP Inspector open during development

### Cognitive Load Reducers

1. **Single command entry point**: All tasks start with `bun` (never `npm`, `node`, `yarn`)
2. **Consistent structure**: All servers follow same architecture
3. **Template reuse**: Copy patterns from existing servers
4. **Documentation first**: Check relevant rule before starting work
5. **Checklist validation**: Use checklists to ensure completeness

### Common Pitfalls to Avoid

1. **DON'T use npm/node/yarn** → Use `bun` exclusively
2. **DON'T skip tests** → 80%+ coverage required
3. **DON'T commit without formatting** → Run `bun run format`
4. **DON'T use `any` without documentation** → Prefer `unknown` + type guards
5. **DON'T forget Workers compatibility** → Check [Workers Deployment](mdc:.cursor/rules/30-workers-deployment.mdc)

## Pre-Deployment Checklist

Before deploying to Cloudflare Workers, verify:

- [ ] All tests pass: `bun test --coverage` (80%+ required)
- [ ] No linter errors: `bun run lint`
- [ ] TypeScript validates: `bun run check`
- [ ] Code formatted: `bun run format`
- [ ] Workers compatibility verified (see [Workers Deployment](mdc:.cursor/rules/30-workers-deployment.mdc))
- [ ] No Bun-only APIs in Workers build
- [ ] Environment variables documented
- [ ] Secrets configured (not in code)
- [ ] README updated
- [ ] wrangler.toml configured

See complete checklist in [Workers Deployment](mdc:.cursor/rules/30-workers-deployment.mdc).

## When to Consult Specialized Rules

| Scenario                | Consult Rule                                                              | Why                                 |
| ----------------------- | ------------------------------------------------------------------------- | ----------------------------------- |
| Creating new MCP server | [MCP Servers](mdc:.cursor/rules/21-mcp-servers.mdc)                       | Architecture patterns and templates |
| Adding MCP tool         | [MCP Protocol](mdc:.cursor/rules/20-mcp-protocol.mdc)                     | Tool schema and handler patterns    |
| Writing tests           | [Testing](mdc:.cursor/rules/11-testing.mdc)                               | Bun test runner patterns            |
| TypeScript types        | [TypeScript](mdc:.cursor/rules/10-typescript.mdc)                         | Type safety patterns                |
| Deploying to Workers    | [Workers Deployment](mdc:.cursor/rules/30-workers-deployment.mdc)         | Complete deployment guide           |
| Writing documentation   | [Documentation](mdc:.cursor/rules/12-documentation.mdc)                   | README templates                    |
| Security/GDPR           | [Enterprise Standards](mdc:.cursor/rules/02-enterprise-standards.mdc)     | Compliance requirements             |
| AI suggestions          | [Automation Suggestions](mdc:.cursor/rules/04-automation-suggestions.mdc) | Fix patterns                        |

## Performance & Quality Standards

### Required Metrics

- **Test Coverage**: 80%+ (lines, functions, branches, statements)
- **Build Time**: < 30s per server (Nx caching helps)
- **Type Safety**: Strict TypeScript, no `any` (unless documented)
- **Documentation**: JSDoc for all public APIs
- **Security**: GDPR compliant, audit logging, no secrets in code

### Optimization Opportunities

When the AI detects opportunities for improvement:

1. **Performance**: Caching, lazy loading, streaming
2. **Type Safety**: Better type inference, stricter validation
3. **Testing**: Missing edge cases, better coverage
4. **Documentation**: Unclear or missing docs
5. **Architecture**: Code organization, pattern improvements

## AI Assistant Capabilities

The AI can help you with:

### Immediate Assistance

- Generate boilerplate for new MCP servers
- Write test cases with 80%+ coverage
- Fix linter and type errors
- Update documentation
- Suggest performance improvements

### Guided Workflows

- Walk through deployment checklist
- Validate Workers compatibility
- Review security patterns
- Optimize monorepo structure
- Debug test failures

### Knowledge Access

- Explain any pattern or rule
- Provide examples from existing servers
- Suggest best practices
- Answer "how to" questions
- Clarify enterprise requirements

Just ask! The AI has access to all rules and can provide contextualized guidance.

## Emergency Quick Reference

### Server Won't Start

```sh
# Check for syntax errors
bun run check

# Verify dependencies
bun install

# Check for port conflicts
lsof -ti:8787 | xargs kill -9
```

### Tests Failing

```sh
# Run specific test file
bun test src/<server-name>/src/index.test.ts

# Run with verbose output
bun test --verbose

# Check coverage gaps
bun test --coverage
```

### Deployment Issues

```sh
# Validate wrangler.toml
bunx wrangler deploy --dry-run

# Check Workers logs
bunx wrangler tail

# Test locally first
bunx wrangler dev
```

### Build Errors

```sh
# Clean and rebuild
bun run cleanup && bun install && bun run build-all

# Check individual server
cd src/<server-name> && bun run build
```

## Summary

This Velocity Hub provides:

- ✅ Single entry point for all workflows
- ✅ Quick-reference tables and commands
- ✅ Context-aware guidance
- ✅ Self-healing suggestions
- ✅ Pre-deployment validation
- ✅ Emergency quick reference

Start here, then navigate to specialized rules as needed. The AI will guide you through the complete workflow while maintaining enterprise-grade quality.
