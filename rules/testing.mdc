---
globs: *.test.ts,*.spec.ts,*_test.ts,**/_spec.ts
---

# Bun Native Test Runner Standards

> **Bun-native testing for 10-30x faster execution**

## Quick Navigation

- üöÄ [Velocity Hub](mdc:.cursor/rules/velocity.mdc) - Start here
- üîß [Automation Suggestions](mdc:.cursor/rules/automation-suggestions.mdc) - Test coverage suggestions
- üß∞ [Bun-First Standards](mdc:.cursor/rules/bun-first.mdc) - Bun development
- üèóÔ∏è [MCP Servers](mdc:.cursor/rules/mcp-servers.mdc) - Server test patterns
- üìò [TypeScript](mdc:.cursor/rules/typescript.mdc) - Type safety in tests

## Core Testing Principle

**EXCLUSIVELY use Bun's native test runner.** Alternative test frameworks are PROHIBITED.

## Test Coverage Quick-Check

```sh
# Quick coverage check (must be 80%+)
bun test --coverage

# Coverage with threshold enforcement
bun test --coverage --coverage-threshold=80

# Generate HTML report for detailed view
bun test --coverage --coverage-reporter=html
open coverage/index.html  # macOS
```

```typescript
// ‚úÖ Correct
import { describe, it, expect, beforeEach, afterEach } from "bun:test";

// ‚ùå PROHIBITED
import { describe, it, expect } from "vitest";
import { describe, it, expect } from "jest";
```

## Test File Organization

### File Naming and Location

- Place tests in `tests/` folders within each package
- Naming: `functionName.test.ts` or `ClassName.test.ts`
- Auto-discovered patterns: `*.test.ts`, `*_test.ts`, `*.spec.ts`, `*_spec.ts`

### Test Structure

```typescript
#!/usr/bin/env bun
import { describe, it, expect, beforeEach, afterEach } from "bun:test";
import { MyModule } from "../src/myModule.ts";

/**
 * Test suite for MyModule functionality.
 * Validates core business logic and edge cases.
 */
describe("MyModule", () => {
  beforeEach(() => {
    // Setup code
  });

  afterEach(() => {
    // Cleanup code
  });

  it("should handle valid input correctly", () => {
    expect(MyModule.process("valid")).toBe("expected");
  });

  it("should throw on invalid input", () => {
    expect(() => MyModule.process(null)).toThrow();
  });
});
```

## Jest-Compatible API

Bun's test runner provides built-in Jest compatibility:

```typescript
// Available functions
describe("suite", () => {
  beforeAll(() => {
    /* runs once before all tests */
  });
  beforeEach(() => {
    /* runs before each test */
  });
  afterEach(() => {
    /* runs after each test */
  });
  afterAll(() => {
    /* runs once after all tests */
  });

  it("test description", () => {});
  test("alternative syntax", () => {});
});

// Available matchers
expect(value).toBe(expected);
expect(value).toEqual(expected);
expect(value).toBeTruthy();
expect(value).toBeFalsy();
expect(value).toThrow();
expect(value).toContain(item);
expect(value).toHaveLength(length);
```

## Mocking

Use Bun's native mocking (Jest-compatible):

```typescript
import { jest } from "bun:test";

// Mock functions
const mockFn = jest.fn();
mockFn.mockReturnValue("mocked");

// Spy on methods
const spy = jest.spyOn(object, "method");
spy.mockImplementation(() => "mocked");

// Vitest-compatible (if needed)
import { vi } from "bun:test";
const mockFn2 = vi.fn();
```

## Coverage Requirements

**MANDATORY 80%+ coverage** for all metrics:

- Lines: 80%+
- Functions: 80%+
- Branches: 80%+
- Statements: 80%+

### Running with Coverage

```sh
# Generate coverage report
bun test --coverage

# Coverage with HTML report
bun test --coverage --coverage-reporter=html

# Coverage with specific threshold
bun test --coverage --coverage-threshold=80
```

## Configuration

Test configuration in [bunfig.toml](mdc:bunfig.toml):

```toml
[test]
root = "."
preload = ["./test-setup.ts"]

[test.coverage]
threshold = 80
reports = ["text", "html", "json"]

[test.reporter]
junit = "test-results.xml"
```

## TypeScript Global Support

Enable TypeScript support for global test functions (optional):

```typescript
/// <reference types="bun/test-globals" />
```

## Test Commands

```sh
# Run all tests
bun test

# Run with coverage (REQUIRED before commits)
bun test --coverage

# Run specific test file
bun test ./tests/myModule.test.ts

# Run tests matching pattern
bun test --test-name-pattern "authentication"

# Watch mode for development
bun test --watch

# Generate JUnit XML for CI/CD
bun test --reporter=junit --reporter-outfile=junit.xml
```

## Performance Benefits

- **10-30x faster** than Jest/Vitest
- Native TypeScript execution (no transpilation)
- Built-in coverage reporting
- Fast incremental testing with watch mode

## Migration from Vitest/Jest

If updating existing tests:

1. Remove Vitest/Jest dependencies from `package.json`
2. Delete `vitest.config.ts` or `jest.config.js`
3. Update imports: `from 'vitest'` ‚Üí `from 'bun:test'`
4. Move configuration to [bunfig.toml](mdc:bunfig.toml)
5. Update mocking: Use `jest.fn()` or `vi.fn()` (both supported)

## Test Pattern Templates

### Template 1: MCP Server Tests

```typescript
import { describe, it, expect, beforeEach } from "bun:test";
import { MyMCPServer } from "../src/index";

describe("MyMCPServer", () => {
  let server: MyMCPServer;

  beforeEach(() => {
    server = new MyMCPServer();
  });

  describe("processOperation", () => {
    it("should handle valid input", () => {
      const result = server.processOperation({ field: "value" });
      expect(result.isError).toBeUndefined();
      expect(result.content[0].text).toContain("success");
    });

    it("should reject invalid input", () => {
      const result = server.processOperation(null);
      expect(result.isError).toBe(true);
      expect(result.content[0].text).toContain("Error");
    });

    it("should validate required fields", () => {
      const result = server.processOperation({});
      expect(result.isError).toBe(true);
    });
  });
});
```

### Template 2: Edge Case Testing

```typescript
describe("Edge Cases", () => {
  it("should handle empty arrays", () => {
    const result = process([]);
    expect(result).toEqual(defaultValue);
  });

  it("should handle null values", () => {
    expect(() => process(null)).toThrow();
  });

  it("should handle large datasets", () => {
    const largeData = Array(10000).fill({ value: 1 });
    const result = process(largeData);
    expect(result).toBeDefined();
  });

  it("should handle concurrent operations", async () => {
    const promises = Array(100)
      .fill(null)
      .map(() => processAsync(data));
    const results = await Promise.all(promises);
    expect(results).toHaveLength(100);
  });
});
```

### Template 3: Async Operation Tests

```typescript
describe("Async Operations", () => {
  it("should handle successful async operations", async () => {
    const result = await asyncOperation();
    expect(result).toBeDefined();
  });

  it("should handle async errors gracefully", async () => {
    await expect(failingAsyncOperation()).rejects.toThrow();
  });

  it("should timeout long operations", async () => {
    const timeout = 1000;
    await expect(
      Promise.race([
        longOperation(),
        new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout")), timeout))
      ])
    ).rejects.toThrow("Timeout");
  });
});
```

## Testing Workflow One-Pager

### Pre-Commit Workflow

```sh
1. bun test --watch          # Develop with live feedback
2. bun test --coverage       # Verify 80%+ coverage
3. bun run lint              # Fix linting issues
4. bun run check             # TypeScript validation
5. git commit                # Commit changes
```

### CI/CD Workflow

```yaml
# Automated in GitHub Actions
- bun test --coverage --coverage-threshold=80
- bun run lint
- bun run check
- bun run build
```

### Coverage Gap Resolution

```sh
# 1. Identify gaps
bun test --coverage

# 2. Review HTML report
bun test --coverage --coverage-reporter=html
open coverage/index.html

# 3. Add missing tests for:
#    - Uncovered functions
#    - Uncovered branches (if/else, switch)
#    - Edge cases
#    - Error handling paths

# 4. Verify improvement
bun test --coverage
```

## Prohibited

‚ùå Vitest ‚ùå Jest ‚ùå Mocha ‚ùå Jasmine ‚ùå Any external test framework

## See Also

- [Velocity Hub](mdc:.cursor/rules/velocity.mdc) - Complete workflow guide
- [Bun-First Standards](mdc:.cursor/rules/bun-first.mdc) - Bun development patterns
- [MCP Servers](mdc:.cursor/rules/mcp-servers.mdc) - Server implementation patterns
- [Automation Suggestions](mdc:.cursor/rules/automation-suggestions.mdc) - Test coverage suggestions
- [TypeScript](mdc:.cursor/rules/typescript.mdc) - Type safety in tests
