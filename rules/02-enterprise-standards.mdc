---
alwaysApply: true
---

# Enterprise Development Standards

> **Enterprise-grade quality and security by default**

## Quick Navigation

- 🚀 [Velocity Hub](mdc:.cursor/rules/00-velocity-hub.mdc) - Start here
- 🔧 [Automation Suggestions](mdc:.cursor/rules/04-automation-suggestions.mdc) - Quality checks
- 📚 [MCP Protocol](mdc:.cursor/rules/20-mcp-protocol.mdc) - Security patterns
- ☁️ [Workers Deployment](mdc:.cursor/rules/30-workers-deployment.mdc) - Production security
- 📖 [Documentation](mdc:.cursor/rules/12-documentation.mdc) - Documentation standards

## Quick-Reference Security Checklist

Use this checklist for all enterprise development:

- [ ] **Input Validation**: All inputs validated before processing
- [ ] **Type Safety**: Strict TypeScript, no `any` (unless documented)
- [ ] **Error Handling**: Try-catch blocks for all async operations
- [ ] **Secrets Management**: No secrets in code, use environment variables
- [ ] **Least Privilege**: Minimal permissions by default
- [ ] **Audit Logging**: Log all operations with timestamps and user context
- [ ] **GDPR Compliance**: Data minimization, right to erasure, portability
- [ ] **HITL Required**: Sensitive operations require human confirmation
- [ ] **Test Coverage**: 80%+ coverage (lines, functions, branches, statements)
- [ ] **Documentation**: JSDoc for all public APIs with business context

## AI-First Development Principles

Prioritize code understanding and review quality over generation speed. The real bottlenecks in enterprise development
are:

- Code reviews and knowledge transfer
- Testing and validation
- Team coordination and documentation
- NOT writing code

## Code Quality Requirements

### Comprehensive Documentation

Every function, class, and complex logic block requires JSDoc comments that explain:

1. **Purpose**: What the code does
2. **Business Context**: Why this solution was chosen
3. **Decision Rationale**: Trade-offs and alternatives considered
4. **Edge Cases**: Important behaviors and constraints

Example:

```typescript
/**
 * Validates MCP tool input against schema for the Decision Framework.
 *
 * Business Context: Enterprise clients require strict GDPR compliance,
 * so we validate all inputs to prevent data leakage and maintain audit trails.
 *
 * Decision Rationale: Chose runtime validation over compile-time to support
 * dynamic tool discovery and maintain flexibility for different MCP clients.
 *
 * @throws {Error} If input schema validation fails
 */
private validateDecisionAnalysisData(input: unknown): DecisionAnalysisData {
  // ...
}
```

### TypeScript Strict Mode

- Use strict TypeScript exclusively
- Complete type safety with interfaces and type guards
- No `any` types unless absolutely necessary (document why)
- Leverage type inference where appropriate

## Enterprise Security Patterns

### GDPR Compliance

- Data minimization by design
- Explicit consent mechanisms
- Right to erasure implementation
- Data portability support
- Audit logging for all data operations

### Security Best Practices

- **Least-Privilege Access**: Minimal permissions by default
- **Schema Validation**: Validate all inputs before processing
- **Human-in-the-Loop (HITL)**: For sensitive operations (delete, export, etc.)
- **Audit Logging**: Comprehensive logging with timestamps and user context
- **Secrets Management**: NEVER commit secrets; use environment variables

### Self-Healing Systems

- Graceful error recovery with fallbacks
- Automated monitoring and alerting
- Clear error messages for debugging
- Rollback capabilities for state changes

## Zero-Shot Chain-of-Thought Process

For all development tasks, follow this reasoning process:

1. **Enterprise Requirements Analysis**: Identify core requirements and map to WeMake's enterprise standards
2. **Strategic Solution Planning**: Decompose into atomic, testable components
3. **Implementation with Excellence**: Generate production-ready code optimized for review quality
4. **Quality Assurance**: Validate against 80%+ test coverage and security standards
5. **Deployment-Ready Delivery**: Include deployment configs, monitoring, documentation

## Response Format

- Use markdown with code blocks for files/scripts
- Include full file contents with TypeScript types
- Be thorough yet concise, professional and directive
- Limit to rule-compliant solutions
- Explain violations and suggest alternatives

## GDPR Compliance Decision Flowchart

```
Storing User Data?
│
├─ YES → Apply GDPR Requirements
│   │
│   ├─ Data Minimization
│   │   └─ Store only what's necessary
│   │       └─ Automatic cleanup (maxSessions pattern)
│   │
│   ├─ Right to Erasure
│   │   └─ Implement delete operation
│   │       └─ Require HITL confirmation
│   │
│   ├─ Data Portability
│   │   └─ Implement export operation
│   │       └─ JSON format, machine-readable
│   │
│   ├─ Consent Tracking
│   │   └─ Log user consent
│   │       └─ Timestamp + user ID
│   │
│   └─ Audit Logging
│       └─ Log all data operations
│           └─ Who, what, when
│
└─ NO → Still apply security best practices
    └─ Input validation, error handling, least privilege
```

## JSDoc Template Library

### Function Documentation

````typescript
/**
 * Brief description of what the function does.
 *
 * Business Context: Why this function exists and what business
 * problem it solves.
 *
 * Decision Rationale: Why this approach was chosen over alternatives,
 * including trade-offs considered.
 *
 * @param input - Description of the input parameter
 * @returns Description of the return value
 * @throws {Error} When validation fails or other error conditions
 *
 * @example
 * ```typescript
 * const result = myFunction({ field: "value" });
 * console.log(result);
 * ```
 */
function myFunction(input: InputType): ReturnType {
  // Implementation
}
````

### Class Documentation

````typescript
/**
 * Brief description of the class purpose.
 *
 * Business Context: What business need this class fulfills.
 *
 * Architecture Notes: Key design decisions and patterns used.
 *
 * @example
 * ```typescript
 * const instance = new MyClass();
 * instance.method();
 * ```
 */
class MyClass {
  // Implementation
}
````

### Complex Logic Documentation

```typescript
/**
 * Complex business logic requires inline documentation.
 *
 * Edge Cases:
 * - Empty array: Returns default value
 * - Negative values: Throws error
 * - Large datasets: Uses streaming approach
 *
 * Performance: O(n log n) due to sorting step
 */
function complexLogic(data: Data[]): Result {
  // Implementation with inline comments for non-obvious steps
}
```

## License and Compliance

- [LICENSE](mdc:LICENSE) - MIT License with enterprise options
- Security issues: security@wemake.cx
- GDPR compliance built into all data handling

## See Also

- [Velocity Hub](mdc:.cursor/rules/00-velocity-hub.mdc) - Complete workflow guide
- [MCP Protocol](mdc:.cursor/rules/20-mcp-protocol.mdc) - Security patterns for MCP
- [Workers Deployment](mdc:.cursor/rules/30-workers-deployment.mdc) - Production security
- [Automation Suggestions](mdc:.cursor/rules/04-automation-suggestions.mdc) - Quality enforcement
- [Testing](mdc:.cursor/rules/11-testing.mdc) - Test coverage requirements
