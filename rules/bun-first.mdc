---
alwaysApply: true
---

# Bun-First Development Standards

> **Bun exclusively for maximum development velocity**

## Quick Navigation

- üöÄ [Velocity Hub](mdc:.cursor/rules/velocity.mdc) - Start here
- üîß [Automation Suggestions](mdc:.cursor/rules/automation-suggestions.mdc) - AI-suggested fixes
- ‚òÅÔ∏è [Workers Deployment](mdc:.cursor/rules/workers-deployment.mdc) - Production deployment
- üß™ [Testing](mdc:.cursor/rules/testing.mdc) - Testing with Bun
- üìò [TypeScript](mdc:.cursor/rules/typescript.mdc) - TypeScript patterns

## Core Requirement

**EXCLUSIVELY use Bun for all operations.** This is a Bun-first monorepo with zero tolerance for alternative tooling.

## Quick Command Reference

| Operation                | Command            | Performance                         |
| ------------------------ | ------------------ | ----------------------------------- |
| **Install dependencies** | `bun install`      | 10-30x faster than npm              |
| **Run scripts**          | `bun run <script>` | Native TypeScript, no transpilation |
| **Run tests**            | `bun test`         | 10-30x faster than Jest/Vitest      |
| **Build application**    | `bun build`        | Built-in bundling & minification    |
| **Execute package**      | `bunx <package>`   | Equivalent to npx                   |
| **Run file**             | `bun run file.ts`  | Direct TypeScript execution         |
| **Shell command**        | `Bun.$\`command\`` | Better than child_process           |

## Mandatory Bun Commands

- `bun install` - Install dependencies
- `bun run <script>` - Run package.json scripts
- `bun test` - Run tests with Bun's native test runner
- `bun build` - Build applications
- `bunx <package>` - Run packages (equivalent to npx)

## Mandatory Bun Built-in APIs

Use Bun's native APIs exclusively. External alternatives are PROHIBITED:

- **HTTP/WebSocket Servers**: `Bun.serve()` (NOT express, fastify, ws)
- **SQLite**: `bun:sqlite` (NOT better-sqlite3)
- **Redis**: `Bun.redis` (NOT ioredis)
- **PostgreSQL**: `Bun.sql` (NOT pg)
- **File Operations**: `Bun.file`, `Bun.write` (NOT fs promises)
- **Shell Commands**: `Bun.$` (NOT execa, child_process)
- **Environment**: Built-in `process.env` (NOT dotenv)
- **Password Hashing**: `Bun.password` (NOT bcrypt)

## Production Deployment (Cloudflare Workers)

For production deployments on Cloudflare Workers, Bun-specific APIs must be replaced with Workers-compatible
alternatives.

**See complete deployment guide:** [Workers Deployment](mdc:.cursor/rules/workers-deployment.mdc)

### Key Compatibility Points

- `bun:sqlite` ‚Üí Cloudflare D1
- `Bun.redis` ‚Üí Cloudflare KV or Durable Objects
- `Bun.$` ‚Üí Not available in Workers
- `Bun.file` ‚Üí Workers APIs or R2
- `Bun.password` ‚Üí Web Crypto API
- `Bun.serve()` ‚Üí Workers fetch handler

### Dual Runtime Pattern

Keep business logic platform-agnostic:

```
src/
  core/logic.ts      # Shared business logic
  index.ts           # Bun-first (local dev)
  worker.ts          # Workers-compatible (production)
```

**Complete guide:** [Workers Deployment](mdc:.cursor/rules/workers-deployment.mdc)

## Prohibited Tools

NEVER use these alternatives:

- ‚ùå Node.js, npm, yarn, pnpm
- ‚ùå Express, Fastify, Koa
- ‚ùå Vite, Webpack, esbuild, Rollup
- ‚ùå better-sqlite3, ioredis, pg
- ‚ùå ws, socket.io
- ‚ùå dotenv
- ‚ùå Any non-Bun alternatives unless technically impossible

## Configuration Files

- [bunfig.toml](mdc:bunfig.toml) - Bun configuration
- [package.json](mdc:package.json) - Workspace and script definitions

## Common Pitfalls and Solutions

### Pitfall 1: Using npm/node/yarn

**Problem:** Falling back to npm/node habits

```sh
# ‚ùå Wrong
npm install
node index.js
npm run test
```

**Solution:** Use Bun exclusively

```sh
# ‚úÖ Correct
bun install
bun run index.ts
bun test
```

### Pitfall 2: Missing .js Extensions in Imports

**Problem:** Forgetting file extensions required for ESM

```typescript
// ‚ùå Wrong
import { helper } from "./helper";
```

**Solution:** Always include .js extension

```typescript
// ‚úÖ Correct
import { helper } from "./helper.js";
```

### Pitfall 3: Using Bun APIs in Workers Build

**Problem:** Using `bun:sqlite`, `Bun.file`, etc. in code destined for Workers

```typescript
// ‚ùå Wrong (for Workers deployment)
import { Database } from "bun:sqlite";
```

**Solution:** Use Workers-compatible alternatives or runtime detection

```typescript
// ‚úÖ Correct
// See [Workers Deployment](mdc:.cursor/rules/workers-deployment.mdc)
export interface Env {
  DB: D1Database;
}
```

### Pitfall 4: Not Checking Workers Compatibility

**Problem:** Building for Workers without testing compatibility

**Solution:** Always test Workers build locally

```sh
bunx wrangler dev  # Test Workers compatibility
```

### Pitfall 5: Skipping Tests Before Commit

**Problem:** Committing without running tests

**Solution:** Always run tests with coverage

```sh
bun test --coverage  # 80%+ required
```

## Performance Benefits

### Real Benchmarks

| Operation                | Bun    | Node/npm               | Speedup       |
| ------------------------ | ------ | ---------------------- | ------------- |
| **Test execution**       | 0.5s   | 5-15s                  | 10-30x faster |
| **Package install**      | 2s     | 20-60s                 | 10-30x faster |
| **TypeScript execution** | Native | Requires transpilation | Instant       |
| **Build time**           | 1-3s   | 5-15s                  | 3-5x faster   |
| **Cold start**           | <100ms | 200-500ms              | 2-5x faster   |

### Key Advantages

- **No transpilation**: Direct TypeScript execution
- **Native performance**: Written in Zig, optimized for speed
- **Built-in tooling**: Bundler, test runner, package manager all-in-one
- **Zero configuration**: SQLite, Redis, PostgreSQL work out-of-the-box
- **ESM by default**: Modern module system without configuration

### Developer Experience Wins

- **Single tool**: No need for separate test runner, bundler, or package manager
- **Fast feedback**: Instant test runs and hot reload
- **Better errors**: Clear, actionable error messages
- **Works out of the box**: Minimal configuration needed

## See Also

- [Velocity Hub](mdc:.cursor/rules/velocity.mdc) - Complete development workflow
- [Workers Deployment](mdc:.cursor/rules/workers-deployment.mdc) - Production deployment
- [Testing](mdc:.cursor/rules/testing.mdc) - Bun native test runner
- [TypeScript](mdc:.cursor/rules/typescript.mdc) - TypeScript standards
